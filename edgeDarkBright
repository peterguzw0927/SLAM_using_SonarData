import cv2
import numpy as np

def darkness(min_contour_area_threshold, max_contour_area_threshold):
    # Read the original image
    img = cv2.imread('190122F0005.jpg')

    # Convert the image to grayscale
    img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Adjust contrast and brightness levels in the grayscale image
    alpha = 17
    beta = 30
    high_contrast_result = cv2.convertScaleAbs(img_gray, alpha=alpha, beta=beta)


    # Blur the high contrast grayscale image for better edge detection
    img_blur = cv2.GaussianBlur(high_contrast_result, (7, 7), 0)

    # Canny Edge Detection
    edges_result = cv2.Canny(image=img_blur, threshold1=100, threshold2=200)
    contours, _ = cv2.findContours(edges_result, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Create a mask image
    mask = np.zeros_like(edges_result)

    # Draw contours on the mask image
    cv2.drawContours(mask, contours, -1, (255), thickness=cv2.FILLED)

    # Dilate the mask to connect nearby regions
    dilated_mask = cv2.dilate(mask, None, iterations=3)

    # Find contours in the dilated mask
    contours, _ = cv2.findContours(dilated_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    filtered_contours = [contour for contour in contours if min_contour_area_threshold <= cv2.contourArea(contour) <= max_contour_area_threshold]
    num_landmarks = len(filtered_contours)
    print("Number of Dark Landmarks:", num_landmarks)

    # Drawing the contours on the original image
    img_with_dark_contours = img.copy()
    cv2.drawContours(img_with_dark_contours, filtered_contours, -1, (0, 255, 0), 2)  # Draw green contours
    return img_with_dark_contours

def brightness(min_contour_area_threshold, max_contour_area_threshold):
    # Read the original image
    img = cv2.imread('190122F0005.jpg')

    # Convert the image to grayscale
    img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Invert the grayscale image to detect bright areas
    inverted_img_gray = 255 - img_gray

    # Adjust contrast and brightness levels in the inverted grayscale image
    alpha = 3.5
    beta = 40
    high_contrast_result = cv2.convertScaleAbs(inverted_img_gray, alpha=alpha, beta=beta)

    # Blur the high contrast grayscale image for better edge detection
    img_blur = cv2.GaussianBlur(high_contrast_result, (1, 1), 0)

    # Canny Edge Detection
    edges_result = cv2.Canny(image=img_blur, threshold1=100, threshold2=200)
    contours, _ = cv2.findContours(edges_result, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Create a mask image
    mask = np.zeros_like(edges_result)

    # Draw contours on the mask image
    cv2.drawContours(mask, contours, -1, (255), thickness=cv2.FILLED)

    # Dilate the mask to connect nearby regions
    dilated_mask = cv2.dilate(mask, None, iterations=3)

    # Find contours in the dilated mask
    contours, _ = cv2.findContours(dilated_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    filtered_contours = [contour for contour in contours if min_contour_area_threshold <= cv2.contourArea(contour) <= max_contour_area_threshold]
    num_landmarks = len(filtered_contours)
    print("Number of Bright Landmarks:", num_landmarks)

    # Drawing the contours on the original image
    img_with_bright_contours = img.copy()
    cv2.drawContours(img_with_bright_contours, filtered_contours, -1, (255, 0, 0), 2)  # Draw blue contours
    return img_with_bright_contours

if __name__ == "__main__":
    min_dark_contour_area_threshold = int(input("Enter the minimum contour area threshold for dark regions: ")) # 350
    max_dark_contour_area_threshold = int(input("Enter the maximum contour area threshold for dark regions: ")) # 2500
    dark_result = darkness(min_dark_contour_area_threshold, max_dark_contour_area_threshold)

    min_bright_contour_area_threshold = int(input("Enter the minimum contour area threshold for bright regions: ")) # 300
    max_bright_contour_area_threshold = int(input("Enter the maximum contour area threshold for bright regions: ")) # 1000
    bright_result = brightness(min_bright_contour_area_threshold, max_bright_contour_area_threshold)

    # Overlay the results
    overlaid_result = cv2.addWeighted(dark_result, 0.5, bright_result, 0.5, 0)
    cv2.imshow('Overlayed Result', overlaid_result)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
